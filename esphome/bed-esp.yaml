esphome:
  name: bed-esp

esp32:
  board: esp32dev
  framework:
    type: arduino

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16
  manual_ip:
    static_ip: ${static_ip}
    gateway: !secret gateway
    subnet: !secret subnet
    dns1: !secret dns1

substitutions:
  static_ip: 192.168.1.146
  red: GPIO05
  green: GPIO33
  blue: GPIO32
  friendly_name: "Bed Lights"

logger:
api:
ota:

sensor:
  - platform: hx711
    gain: 128
    id: bed_weight
    dout_pin: GPIO14
    clk_pin: GPIO17
    filters:
      - delta: 500
      - lambda: |-
          if (x >= 0 && x < 600000) return x;
          else return {};
    update_interval: 400ms
    accuracy_decimals: 0
  - platform: homeassistant
    entity_id: sensor.colorloopstate
    id: hassstate

button:
  - platform: template
    name: Tare
    id: tare
    on_press:
      - lambda: |-
          if (id(bed_weight).state >= 0 && id(bed_weight).state < 600000) {id(zero) = id(bed_weight).state;}
          
binary_sensor:
  - platform: template
    name: "Bed Occupancy"
    device_class: occupancy
    filters:
      - delayed_on: 1000ms #avoid bump/press being reported as detected
      - delayed_off: 6s #avoid shifting being reported as clear
    lambda: |-
      if (id(bed_weight).state >= (id(zero) + 30000) ) {
        return true;
      } else {
        return false;
      }      

globals:
  - id: zero
    type: float
    restore_value: yes
    initial_value: '90000'

light:
  - platform: rgb
    id: leds
    name: "${friendly_name}"
    red: output_red
    green: output_green
    blue: output_blue
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - random:
          name: Music
          transition_length: .1s
          update_interval: .2s
      - lambda:
          name: Color Loop
          lambda: |-
            static float state = 0;
            if (state != id(hassstate).state) {
              state = id(hassstate).state;
              auto call = id(leds).turn_on();
              call.set_transition_length(3000);
              if (state == 0) {
                call.set_rgb(0.45, 0.98, 0.39);
              } else if (state == 1) {
                call.set_rgb(0.45, 0.98, 0.93);
              } else if (state == 2) {
                call.set_rgb(0.38, 0.15, 0.96);
              } else if (state == 3) {
                call.set_rgb(0.5, 0.17, 0.96);
              } else {
                call.set_rgb(0.92, 0.2, 0.27);
              }
              call.perform();
            }

output:
  - platform: ledc
    id: output_red
    pin: ${red}
  - platform: ledc
    id: output_green
    pin: ${green}
  - platform: ledc
    id: output_blue
    pin: ${blue}