esphome:
  name: lightswitch
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret ssid
  password: !secret password
  fast_connect: on
  #output_power: 8.5dB
  reboot_timeout: 0s
  manual_ip:
    static_ip: ${static_ip}
    gateway: !secret gateway
    subnet: !secret subnet
    dns1: !secret dns1

captive_portal:
logger:
api:
ota:

substitutions:
  name: "Light Switch"
  static_ip: 192.168.1.234

sensor:
  - platform: homeassistant
    entity_id: sensor.colorloopstate
    id: hassstate

binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.bedroom_on
    id: bedroomstate
    on_press:
      - light.turn_on: rgb_light_switch
      - light.turn_on: rgb_light_switch_corner
    on_release:
      - light.turn_off: rgb_light_switch
      - light.turn_off: rgb_light_switch_corner
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    id: lightswitch
    on_multi_click:
    - timing:
        - ON for at most .3s
        - OFF for at least .4s
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: switch.bedroomtoggle
    - timing:
        - ON for at least .301s
        - OFF for at least .1s
      then:
      - homeassistant.service:
          service: script.morning
    - timing:
        - ON for at least 3s
        - OFF for at least .1s
      then:
        - switch.toggle: relay1
          
light:
  - platform: rgb
    id: rgb_light_switch
    name: "${name}"
    red: output_red
    green: output_green
    blue: output_blue
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - random:
          name: Music
          transition_length: .1s
          update_interval: .2s
      - lambda:
          name: Color Loop
          lambda: |-
            static float state;
            if (state != id(hassstate).state) {
              state = id(hassstate).state;
              auto call = id(rgb_light_switch).turn_on();
              call.set_transition_length(3000);
              if (state == 0) {
                call.set_rgb(0.45, 0.98, 0.39);
              } else if (state == 1) {
                call.set_rgb(0.45, 0.98, 0.93);
              } else if (state == 2) {
                call.set_rgb(0.38, 0.15, 0.96);
              } else if (state == 3) {
                call.set_rgb(0.5, 0.17, 0.96);
              } else {
                call.set_rgb(0.92, 0.2, 0.27);
              }
              call.perform();
            }
  - platform: rgb
    id: rgb_light_switch_corner
    name: "${name} Corner"
    red: output_red_corner
    green: output_green_corner
    blue: output_blue_corner
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - random:
          name: Music
          transition_length: .1s
          update_interval: .2s
      - lambda:
          name: Color Loop
          lambda: |-
            static float state;
            if (state != id(hassstate).state) {
              state = id(hassstate).state;
              auto call = id(rgb_light_switch_corner).turn_on();
              call.set_transition_length(3000);
              if (state == 0) {
                call.set_rgb(0.45, 0.98, 0.39);
              } else if (state == 1) {
                call.set_rgb(0.45, 0.98, 0.93);
              } else if (state == 2) {
                call.set_rgb(0.38, 0.15, 0.96);
              } else if (state == 3) {
                call.set_rgb(0.5, 0.17, 0.96);
              } else {
                call.set_rgb(0.92, 0.2, 0.27);
              }
              call.perform();
            }

switch:
  - platform: gpio
    name: "${name} Relay"
    pin: GPIO15
    id: 'relay1'
    restore_mode: ALWAYS_ON

output:
  - platform: esp8266_pwm
    id: output_green
    pin: GPIO5
  - platform: esp8266_pwm
    id: output_red
    pin: GPIO14
  - platform: esp8266_pwm
    id: output_blue
    pin: GPIO4
  - platform: esp8266_pwm
    id: output_green_corner
    pin: GPIO12
    inverted: true
  - platform: esp8266_pwm
    id: output_red_corner
    pin: GPIO0
    inverted: true
  - platform: esp8266_pwm
    id: output_blue_corner
    pin: GPIO2
    inverted: true