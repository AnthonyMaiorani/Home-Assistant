substitutions:
  deviceid: wyzebulb1
  devicename: wyzebulb1
  #static_ip:

esphome:
  name: $deviceid
  platform: ESP32
  board: esp32doit-devkit-v1

captive_portal:
logger:
api:
ota:

sensor:
  - platform: homeassistant
    entity_id: sensor.colorloopstate
    id: hassstate

wifi:
  ssid: !secret ssid
  password: !secret password
  fast_connect: on
  #manual_ip:
  #  static_ip: ${static_ip}
  #  gateway: !secret gateway
  #  subnet: !secret subnet
  #  dns1: !secret dns1
        
# Define output pins
output:
  - platform: ledc
    id: output_red
    pin: GPIO14
    power_supply: rgb_power
  - platform: ledc
    id: output_green
    pin: GPIO26
    power_supply: rgb_power
  - platform: ledc
    id: output_blue
    pin: GPIO13
    power_supply: rgb_power
  - platform: ledc
    id: output_white
    pin: GPIO15

power_supply:
  - id: rgb_power
    pin: GPIO23

# Define a light entity
light:
  - platform: rgb
    name: ${devicename} RGB
    id: ${deviceid}
    red: output_red
    green: output_green
    blue: output_blue
    effects:
      - random:
          name: Music
          transition_length: .1s
          update_interval: .2s
      - lambda:
          name: Color Loop
          lambda: |-
            static float state;
            if (state != id(hassstate).state) {
              state = id(hassstate).state;
              auto call = id(${deviceid}).turn_on();
              call.set_transition_length(3000);
              if (state == 0) {
                call.set_rgb(0.45, 0.98, 0.39);
              } else if (state == 1) {
                call.set_rgb(0.45, 0.98, 0.93);
              } else if (state == 2) {
                call.set_rgb(0.38, 0.15, 0.96);
              } else if (state == 3) {
                call.set_rgb(0.5, 0.17, 0.96);
              } else {
                call.set_rgb(0.92, 0.2, 0.27);
              }
              call.perform();
            }
  - platform: monochromatic
    name: ${devicename} White
    id: ${deviceid}_white
    output: output_white